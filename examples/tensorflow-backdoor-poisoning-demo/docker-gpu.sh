#!/bin/bash

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([data-dir],[],[Data directory relative to current directory],[data])
# ARG_OPTIONAL_SINGLE([image],[],[GPU-enabled docker image to use for running a job],[securing-ai/tensorflow2-gpu-py37:0.0.0-1])
# ARG_OPTIONAL_SINGLE([gpu-devices],[],[Specify the exact GPU devices to use, overrides num-gpus],[])
# ARG_OPTIONAL_SINGLE([gpu-num],[],[Set the GPU devices to use],[1])
# ARG_OPTIONAL_SINGLE([mlflow-uri],[],[MLFlow Tracking URI],[http://mlflow-tracking-username:5000])
# ARG_OPTIONAL_SINGLE([name],[],[Experiment name],[mnist])
# ARG_OPTIONAL_SINGLE([network],[],[Docker network to attach to],[tensorflow-mnist-classifier_username])
# ARG_OPTIONAL_SINGLE([s3-uri],[],[S3 endpoint URI],[http://minio-username:9000])
# ARG_OPTIONAL_SINGLE([s3-user],[],[Username for S3 storage],[minio])
# ARG_OPTIONAL_SINGLE([s3-pass],[],[Password for S3 storage],[minio123])
# ARG_LEFTOVERS([Entry point keyword arguments (optional)])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Run a MLFlow job using a GPU-enabled container.\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_data_dir="data"
_arg_image="securing-ai/tensorflow2-gpu-py37:0.0.0-1"
_arg_gpu_devices=
_arg_gpu_num="1"
_arg_mlflow_uri="http://mlflow-tracking-username:5000"
_arg_name="mnist"
_arg_network="tensorflow-mnist-classifier_username"
_arg_s3_uri="http://minio-username:9000"
_arg_s3_user="minio"
_arg_s3_pass="minio123"


print_help()
{
  printf '%s\n' "Run a MLFlow job using a GPU-enabled container.
"
  printf 'Usage: %s [--data-dir <arg>] [--image <arg>] [--gpu-devices <arg>] [--gpu-num <arg>] [--mlflow-uri <arg>] [--name <arg>] [--network <arg>] [--s3-uri <arg>] [--s3-user <arg>] [--s3-pass <arg>] [-h|--help] ... \n' "$0"
  printf '\t%s\n' "... : Entry point keyword arguments (optional)"
  printf '\t%s\n' "--data-dir: Data directory relative to current directory (default: 'data')"
  printf '\t%s\n' "--image: GPU-enabled docker image to use for running a job (default: 'securing-ai/tensorflow2-gpu-py37:0.0.0-1')"
  printf '\t%s\n' "--gpu-devices: Specify the exact GPU devices to use, overrides num-gpus (no default)"
  printf '\t%s\n' "--gpu-num: Set the GPU devices to use (default: '1')"
  printf '\t%s\n' "--mlflow-uri: MLFlow Tracking URI (default: 'http://mlflow-tracking-username:5000')"
  printf '\t%s\n' "--name: Experiment name (default: 'mnist')"
  printf '\t%s\n' "--network: Docker network to attach to (default: 'tensorflow-mnist-classifier_username')"
  printf '\t%s\n' "--s3-uri: S3 endpoint URI (default: 'http://minio-username:9000')"
  printf '\t%s\n' "--s3-user: Username for S3 storage (default: 'minio')"
  printf '\t%s\n' "--s3-pass: Password for S3 storage (default: 'minio123')"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --data-dir)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_data_dir="$2"
        shift
        ;;
      --data-dir=*)
        _arg_data_dir="${_key##--data-dir=}"
        ;;
      --image)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_image="$2"
        shift
        ;;
      --image=*)
        _arg_image="${_key##--image=}"
        ;;
      --gpu-devices)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_gpu_devices="$2"
        shift
        ;;
      --gpu-devices=*)
        _arg_gpu_devices="${_key##--gpu-devices=}"
        ;;
      --gpu-num)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_gpu_num="$2"
        shift
        ;;
      --gpu-num=*)
        _arg_gpu_num="${_key##--gpu-num=}"
        ;;
      --mlflow-uri)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_mlflow_uri="$2"
        shift
        ;;
      --mlflow-uri=*)
        _arg_mlflow_uri="${_key##--mlflow-uri=}"
        ;;
      --name)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_name="$2"
        shift
        ;;
      --name=*)
        _arg_name="${_key##--name=}"
        ;;
      --network)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_network="$2"
        shift
        ;;
      --network=*)
        _arg_network="${_key##--network=}"
        ;;
      --s3-uri)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_s3_uri="$2"
        shift
        ;;
      --s3-uri=*)
        _arg_s3_uri="${_key##--s3-uri=}"
        ;;
      --s3-user)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_s3_user="$2"
        shift
        ;;
      --s3-user=*)
        _arg_s3_user="${_key##--s3-user=}"
        ;;
      --s3-pass)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_s3_pass="$2"
        shift
        ;;
      --s3-pass=*)
        _arg_s3_pass="${_key##--s3-pass=}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names=""
  _our_args=$((${#_positionals[@]} - 0))
  for ((ii = 0; ii < _our_args; ii++))
  do
    _positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

###########################################################################################
# Global parameters
###########################################################################################

readonly data_dir="$(pwd)/${_arg_data_dir}"
readonly docker_image="${_arg_image}"
readonly entry_point_kwargs="${_arg_leftovers[*]}"
readonly gpu_devices="${_arg_gpu_devices}"
readonly gpu_num="${_arg_gpu_num}"
readonly mlflow_uri="${_arg_mlflow_uri}"
readonly experiment_name="${_arg_name}"
readonly network="${_arg_network}"
readonly s3_uri="${_arg_s3_uri}"
readonly s3_user="${_arg_s3_user}"
readonly s3_pass="${_arg_s3_pass}"
readonly logname="docker-gpu run"

###########################################################################################
# Get the --gpus option for docker run
#
# Globals:
#   gpu_devices
#   gpu_num
# Arguments:
#   None
# Returns:
#   String to be passed to the docker run --gpus option
###########################################################################################

gpus_option_value() {
  local gpus="${gpu_num}"

  if [[ ! -z ${gpu_devices} ]]; then
    gpus=\"device=${gpu_devices}\"
  fi

  echo "${gpus}"
}

###########################################################################################
# Create bucket on S3 storage
#
# Globals:
#   data_dir
#   docker_image
#   entry_point_kwargs
#   experiment_name
#   mlflow_uri
#   network
#   s3_uri
#   s3_user
#   s3_pass
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

docker_gpu_run() {
  local gpus=$(gpus_option_value)

  echo "${logname}: Starting GPU-enabled container using ${docker_image}"

  docker run --rm -it --gpus ${gpus} \
    --volume "${data_dir}:/nfs/data" \
    -e "AWS_ACCESS_KEY_ID=${s3_user}" \
    -e "AWS_SECRET_ACCESS_KEY=${s3_pass}" \
    -e "MLFLOW_EXPERIMENT_NAME=${experiment_name}" \
    -e "MLFLOW_TRACKING_URI=${mlflow_uri}" \
    -e "MLFLOW_S3_ENDPOINT_URL=${s3_uri}" \
    --network=${network} \
    ${docker_image} \
    ${entry_point_kwargs}
}

###########################################################################################
# Main script
###########################################################################################

docker_gpu_run
# ] <-- needed because of Argbash
