# NOTICE
#
# This software (or technical data) was produced for the U. S. Government under
# contract SB-1341-14-CQ-0010, and is subject to the Rights in Data-General Clause
# 52.227-14, Alt. IV (DEC 2007)
#
# Â© 2021 The MITRE Corporation.
"""A task plugin module for managing random number generators."""

from __future__ import annotations

from typing import Tuple

import numpy as np
import structlog
from numpy.random._generator import Generator as RNGenerator
from structlog.stdlib import BoundLogger

from mitre.securingai import pyplugs

LOGGER: BoundLogger = structlog.stdlib.get_logger()


@pyplugs.register
@pyplugs.task_nout(2)
def init_rng(seed: int = -1) -> Tuple[int, RNGenerator]:
    """Constructs a new random number generator.

    Args:
        seed: A seed to initialize the random number generator. If the value is less
            than zero, then the seed is generated by pulling fresh, unpredictable
            entropy from the OS. The default is `-1`.

    Returns:
        A tuple containing the seed and the initialized random number generator. If a
        `seed < 0` was passed as an argument, then the seed generated by the OS will be
        returned.

    See Also:
        - :py:func:`numpy.random.default_rng`
    """
    rng = np.random.default_rng(seed if seed >= 0 else None)

    if seed < 0:
        seed = rng.bit_generator._seed_seq.entropy

    return int(seed), rng
