#!/bin/bash

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_REPEATED([cidr],[c],[CIDR to whitelist],[])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Restrict network access at runtime\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}


begins_with_short_option()
{
  local first_option all_short_options='ch'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_cidr=()


print_help()
{
  printf '%s\n' "Restrict network access at runtime
"
  printf 'Usage: %s [-c|--cidr <arg>] [-h|--help]\n' "$0"
  printf '\t%s\n' "-c, --cidr: CIDR to whitelist (empty by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -c|--cidr)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_cidr+=("$2")
        shift
        ;;
      --cidr=*)
        _arg_cidr+=("${_key##--cidr=}")
        ;;
      -c*)
        _arg_cidr+=("${_key##-c}")
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

###########################################################################################
# Global parameters
###########################################################################################

readonly cidr_list="${_arg_cidr[@]}"
readonly logname="Restrict Network Access"

###########################################################################################
# Allow all traffic on the loopback interface
#
# Globals:
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

allow_loopback_connections() {
  echo "${logname}: update firewall rules to permit traffic on loopback interface"

  sudo /sbin/iptables -I INPUT 1 -i lo -j ACCEPT -m comment --comment "Loopback interface"
  sudo /sbin/iptables -I OUTPUT 1 -o lo -j ACCEPT -m comment --comment "Loopback interface"
}

###########################################################################################
# Whitelist traffic
#
# Globals:
#   cidr_list
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

allow_cidr_connections() {
  for cidr in ${cidr_list[@]}; do
    echo "${logname}: update firewall rules to permit traffic on CIDR '${cidr}'"

    sudo /sbin/iptables -A INPUT -s ${cidr} -j ACCEPT
    sudo /sbin/iptables -A OUTPUT -d ${cidr} -j ACCEPT
  done
}

###########################################################################################
# Drop all traffic by default
#
# Globals:
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

drop_all_other_connections() {
  echo "${logname}: update firewall rules to drop all other traffic by default"

  sudo /sbin/iptables -A INPUT -j DROP
  sudo /sbin/iptables -A OUTPUT -j DROP
}

###########################################################################################
# Main script
###########################################################################################

allow_loopback_connections
allow_cidr_connections
drop_all_other_connections
# ] <-- needed because of Argbash
