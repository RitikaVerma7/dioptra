#!/bin/bash
# NOTICE
#
# This software (or technical data) was produced for the U. S. Government under
# contract SB-1341-14-CQ-0010, and is subject to the Rights in Data-General Clause
# 52.227-14, Alt. IV (DEC 2007)
#
# Â© 2021 The MITRE Corporation.

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([ai-lab-host],[],[AI Lab Service host],[restapi])
# ARG_OPTIONAL_SINGLE([ai-lab-port],[],[AI Lab Service port],[5000])
# ARG_OPTIONAL_SINGLE([mlflow-tracking-host],[],[AI Lab Service host],[mlflow-tracking])
# ARG_OPTIONAL_SINGLE([mlflow-tracking-port],[],[AI Lab Service port],[5000])
# ARG_OPTIONAL_SINGLE([nginx-lab-port],[],[Nginx listening port],[30080])
# ARG_OPTIONAL_SINGLE([nginx-mlflow-port],[],[Nginx listening port],[35000])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Nginx Entry Point\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_ai_lab_host="restapi"
_arg_ai_lab_port="5000"
_arg_mlflow_tracking_host="mlflow-tracking"
_arg_mlflow_tracking_port="5000"
_arg_nginx_lab_port="30080"
_arg_nginx_mlflow_port="35000"


print_help()
{
  printf '%s\n' "Nginx Entry Point
"
  printf 'Usage: %s [--ai-lab-host <arg>] [--ai-lab-port <arg>] [--mlflow-tracking-host <arg>] [--mlflow-tracking-port <arg>] [--nginx-lab-port <arg>] [--nginx-mlflow-port <arg>] [-h|--help]\n' "$0"
  printf '\t%s\n' "--ai-lab-host: AI Lab Service host (default: 'restapi')"
  printf '\t%s\n' "--ai-lab-port: AI Lab Service port (default: '5000')"
  printf '\t%s\n' "--mlflow-tracking-host: AI Lab Service host (default: 'mlflow-tracking')"
  printf '\t%s\n' "--mlflow-tracking-port: AI Lab Service port (default: '5000')"
  printf '\t%s\n' "--nginx-lab-port: Nginx listening port (default: '30080')"
  printf '\t%s\n' "--nginx-mlflow-port: Nginx listening port (default: '35000')"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --ai-lab-host)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_ai_lab_host="$2"
        shift
        ;;
      --ai-lab-host=*)
        _arg_ai_lab_host="${_key##--ai-lab-host=}"
        ;;
      --ai-lab-port)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_ai_lab_port="$2"
        shift
        ;;
      --ai-lab-port=*)
        _arg_ai_lab_port="${_key##--ai-lab-port=}"
        ;;
      --mlflow-tracking-host)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_mlflow_tracking_host="$2"
        shift
        ;;
      --mlflow-tracking-host=*)
        _arg_mlflow_tracking_host="${_key##--mlflow-tracking-host=}"
        ;;
      --mlflow-tracking-port)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_mlflow_tracking_port="$2"
        shift
        ;;
      --mlflow-tracking-port=*)
        _arg_mlflow_tracking_port="${_key##--mlflow-tracking-port=}"
        ;;
      --nginx-lab-port)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_nginx_lab_port="$2"
        shift
        ;;
      --nginx-lab-port=*)
        _arg_nginx_lab_port="${_key##--nginx-lab-port=}"
        ;;
      --nginx-mlflow-port)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_nginx_mlflow_port="$2"
        shift
        ;;
      --nginx-mlflow-port=*)
        _arg_nginx_mlflow_port="${_key##--nginx-mlflow-port=}"
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

###########################################################################################
# Global parameters
###########################################################################################

readonly ai_lab_host="${_arg_ai_lab_host}"
readonly ai_lab_port="${_arg_ai_lab_port}"
readonly mlflow_tracking_host="${_arg_mlflow_tracking_host}"
readonly mlflow_tracking_port="${_arg_mlflow_tracking_port}"
readonly nginx_lab_port="${_arg_nginx_lab_port}"
readonly nginx_mlflow_port="${_arg_nginx_mlflow_port}"
readonly logname="Container Entry Point"

###########################################################################################
# Secure the container at runtime
#
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

secure_container() {
  if [[ -f /usr/local/bin/secure-container.sh ]]; then
    /usr/local/bin/secure-container.sh
  else
    echo "${logname}: ERROR - /usr/local/bin/secure-container.sh script missing" 1>&2
    exit 1
  fi
}

###########################################################################################
# Set nginx configuration variables
#
# Globals:
#   ai_lab_host
#   ai_lab_port
#   mlflow_tracking_host
#   mlflow_tracking_port
#   nginx_lab_port
#   nginx_mlflow_port
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

set_nginx_variables() {
  echo "${logname}: INFO - Set nginx variables  |  \
  AI_LAB_HOST=${ai_lab_host} \
  AI_LAB_PORT=${ai_lab_port} \
  MLFLOW_TRACKING_HOST=${mlflow_tracking_host} \
  MLFLOW_TRACKING_PORT=${mlflow_tracking_port} \
  NGINX_LAB_PORT=${nginx_lab_port}\
  NGINX_MLFLOW_PORT=${nginx_mlflow_port}"
  sed -i -e 's/$AI_LAB_HOST/'"${ai_lab_host}"'/g' /etc/nginx/conf.d/default.conf
  sed -i -e 's/$AI_LAB_PORT/'"${ai_lab_port}"'/g' /etc/nginx/conf.d/default.conf
  sed -i -e 's/$MLFLOW_TRACKING_HOST/'"${mlflow_tracking_host}"'/g' \
    /etc/nginx/conf.d/default.conf
  sed -i -e 's/$MLFLOW_TRACKING_PORT/'"${mlflow_tracking_port}"'/g' \
    /etc/nginx/conf.d/default.conf
  sed -i -e 's/$NGINX_LAB_PORT/'"${nginx_lab_port}"'/g' /etc/nginx/conf.d/default.conf
  sed -i -e 's/$NGINX_MLFLOW_PORT/'"${nginx_mlflow_port}"'/g' /etc/nginx/conf.d/default.conf

  local default_conf=$(cat /etc/nginx/conf.d/default.conf)
  echo "${logname}: INFO - Updated contents of /etc/nginx/conf.d/default.conf"
  echo "${default_conf}"
}

###########################################################################################
# Start nginx server
#
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

start_nginx() {
  echo "${logname}: INFO - Starting Nginx process"
  /usr/sbin/nginx
}

###########################################################################################
# Main script
###########################################################################################

secure_container
set_nginx_variables
start_nginx
# ] <-- needed because of Argbash
