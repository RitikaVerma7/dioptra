#!/bin/bash

# Created by argbash-init v2.8.1
# ARG_OPTIONAL_SINGLE([env],[e],[Name of conda environment],[base])
# ARG_OPTIONAL_REPEATED([channel],[c],[Conda channel to search for packages],[])
# ARG_POSITIONAL_SINGLE([filepath],[Path to an environment.yml file],[])
# ARG_DEFAULTS_POS()
# ARGBASH_SET_INDENT([  ])
# ARG_HELP([Install Python modules using conda and pip at runtime\n])"
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


begins_with_short_option()
{
  local first_option all_short_options='ech'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_filepath=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_env="base"
_arg_channel=()


print_help()
{
  printf '%s\n' "Install Python modules using conda and pip at runtime
"
  printf 'Usage: %s [-e|--env <arg>] [-c|--channel <arg>] [-h|--help] <filepath>\n' "$0"
  printf '\t%s\n' "<filepath>: Path to an environment.yml file"
  printf '\t%s\n' "-e, --env: Name of conda environment (default: 'base')"
  printf '\t%s\n' "-c, --channel: Conda channel to search for packages (empty by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -e|--env)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_env="$2"
        shift
        ;;
      --env=*)
        _arg_env="${_key##--env=}"
        ;;
      -e*)
        _arg_env="${_key##-e}"
        ;;
      -c|--channel)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_channel+=("$2")
        shift
        ;;
      --channel=*)
        _arg_channel+=("${_key##--channel=}")
        ;;
      -c*)
        _arg_channel+=("${_key##-c}")
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  local _required_args_string="'filepath'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_filepath "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

shopt -s extglob
set -euo pipefail

###########################################################################################
# Global parameters
###########################################################################################

readonly ai_user="${AI_USER}"
readonly ai_workdir="${AI_WORKDIR}"
readonly channel=${_arg_channel[@]}
readonly conda_dir="${CONDA_DIR}"
readonly env="${_arg_env}"
readonly filepath="${_arg_filepath}"
readonly logname="Install Python Modules"

###########################################################################################
# Read channels field
#
# Globals:
#   channel
#   filepath
# Arguments:
#   None
# Returns:
#   List of installation channels in option flag format
###########################################################################################

read_channels() {
  local env_channels="-c defaults"

  if [[ -z ${channel[@]} ]]; then
    local env_channels_list=($(yq read ${filepath} channels[*]))
    local env_channels=$(for c in ${env_channels_list[@]}; do echo "-c ${c}"; done)
  fi

  echo "${env_channels}"
}

###########################################################################################
# Install conda dependencies
#
# Globals:
#   conda_dir
#   env
#   filepath
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

install_conda_dependencies() {
  local dependencies=$(yq read ${filepath} "dependencies(.==*)")
  local channels=$(read_channels)

  if [[ ! -z ${dependencies} && ! -z ${channels} ]]; then
    echo "${logname}: installing dependencies - conda"
    echo "${logname}: channels option flags - ${channels}"
    echo "${logname}: dependencies list - ${dependencies}"

    ${conda_dir}/condabin/conda install \
      -n ${env} \
      ${channels} \
      -q \
      -y \
      ${dependencies}
  fi
}

###########################################################################################
# Install pip dependencies
#
# Globals:
#   conda_dir
#   env
#   filepath
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

install_pip_dependencies() {
  local dependencies=$(yq read ${filepath} "dependencies[*].pip[*]")

  if [[ ! -z ${dependencies} ]]; then
    echo "${logname}: installing dependencies - pip"
    echo "${logname}: dependencies list - ${dependencies}"

    ${conda_dir}/condabin/conda run -n ${env} \
      pip install --no-cache-dir ${dependencies}
  fi
}

###########################################################################################
# Clear cache and prune files
#
# Globals:
#   ai_user
#   conda_dir
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

clear_cache() {
  echo "${logname}: pruning files"

  find ${conda_dir} -follow -type f -name '*.a' -delete
  find ${conda_dir} -follow -type f -name '*.js.map' -delete
  rm -rf /home/${ai_user}/.cache/yarn

  echo "${logname}: clearing conda cache"

  ${conda_dir}/condabin/conda clean -afy
}

###########################################################################################
# Fix permissions
#
# Globals:
#   ai_user
#   ai_workdir
#   conda_dir
#   logname
# Arguments:
#   None
# Returns:
#   None
###########################################################################################

fix_permissions() {
  echo "${logname}: fixing directory permissions - ${conda_dir} ${ai_workdir} /home/${ai_user}"

  /usr/local/bin/fix-permissions.sh ${conda_dir} ${ai_workdir} /home/${ai_user}
}

###########################################################################################
# Main script
###########################################################################################

install_conda_dependencies
install_pip_dependencies
clean_cache
fix_permissions
# ] <-- needed because of Argbash
